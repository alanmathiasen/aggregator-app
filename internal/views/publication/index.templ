package publication

// import "strconv"
import (
	"github.com/alanmathiasen/aggregator-api/internal/services"
	"github.com/alanmathiasen/aggregator-api/internal/views/shared"
	"strconv"
	"time"
	// "fmt"
	// "encoding/json"
)

const (
	STATUS_READING = "reading"
	STATUS_DROPPED = "dropped"
)

templ Publication(publication *services.Publication) {
	<div
		class="bg-base-100 shadow-sm flex"
		hx-swap="outerHTML"
		id={ "publication-" + strconv.Itoa(publication.ID) }
	>
		<div class="w-full h-full flex-none relative ">
			// <img class="absolute w-full h-full object-cover" src={ publication.Image } alt="Movie"/>
		</div>
		<div class="flex w-full justify-between mx-3 my-1 ">
			<div class="flex flex-col">
				<h2 class="card-title mb-1 text-lg">{ publication.Title }</h2>
				<div class="mt-1">
					@shared.Rating(4.4)
				</div>
				<p class="text-sm text-secondary mt-2">Tracking: 2354</p>
			</div>
			<div class="flex flex-col card-actions gap-[1px] items-end">
				<button
					class="btn btn-primary p-0 h-6 w-6 hover:bg-accent"
				>
					<span>
						@shared.FollowIcon("h-4", "w-", "stroke-base-100")
					</span>
				</button>
				<button
					class="btn btn-primary p-0 h-6 w-6 hover:bg-accent"
				>
					<span>
						@shared.FollowIcon("h-4", "w-4", "stroke-base-100")
					</span>
				</button>
				<button
					class="btn btn-primary p-0 h-6 w-6 hover:bg-accent"
				>
					@shared.FollowIcon("h-4", "w-4", "stroke-base-100")
				</button>
				<button
					hx-put={ "/publication/" + strconv.Itoa(publication.ID) + "/follow" }
					hx-trigger="click"
					hx-target={ "#publication-" + strconv.Itoa(publication.ID) }
					class="btn btn-primary p-0 h-6 w-6 hover:bg-accent"
				>
					// if publication.IsFollowed {
					// 	Follow
					// } else {
					// 	Stop following
					// }
				</button>
			</div>
		</div>
	</div>
}

// func lastChapterID(p *services.Publication) string {
// 	// for _, c := range p.Chapters {
// 	// 	json, err := json.MarshalIndent(c, "", "\t")
// 	// 	if err != nil {
// 	// 		return ""
// 	// 	}
// 	// 	fmt.Println(string(json))
// 	// }
// 	if len(p.Chapters) == 0 {
// 		return ""
// 	}
// 	lastChapterID := strconv.Itoa(p.Chapters[len(p.Chapters)-1].ID)
// 	return lastChapterID
// }

// func disableMarkLastAsReadBtn(p *services.Publication) string {
// 	disabledClass := "btn-disabled"
// 	if len(p.Chapters) == 0 {
// 		return disabledClass
// 	}
// 	if len(p.Chapters) != 0 && p.LastReadChapterNumber == nil {
// 		return ""
// 	}
// 	if len(p.Chapters) == 0 || p.Chapters[len(p.Chapters)-1].Number == *p.LastReadChapterNumber {
// 		return disabledClass
// 	}
// 	return ""
// }
templ Buttons(p *services.Publication) {
	<div class="join">
		<div class="tooltip" data-tip="Mark last chapter as seen.">
			<form
				hx-put={ "/publication/" + strconv.Itoa(p.ID) + "/follow" }
				hx-target={ "#publication-" + strconv.Itoa(p.ID) }
				hx-swap="outerHTML"
			>
				<input type="hidden" name="status" value={ STATUS_READING }/>
				// <input type="hidden" name="chapter_id" value={ lastChapterID(p) }/>
				// + disableMarkLastAsReadBtn(p) } vvv
				<button
					type="submit"
					class={ "btn join-item p-2 " }
				>
					@shared.CheckIcon("h-32", "w-32", "stroke-base-100", "fill-base-100")
				</button>
			</form>
		</div>
		<div x-data="{ modalOpen: false }" class="join-item">
			<button @click="modalOpen =!modalOpen" class="btn join-item p-2">
				@shared.EditIcon()
			</button>
			<div x-show="modalOpen" class="fixed inset-0 z-50 overflow-y-auto" aria-labelledby="modal-title" role="dialog" aria-modal="true">
				<div x-show="modalOpen" class="flex items-end justify-center min-h-screen px-4 text-center md:items-center sm:block sm:p-0">
					<div
						x-cloak
						@click="modalOpen = false"
						x-transition:enter="transition ease-out duration-300 transform"
						x-transition:enter-start="opacity-0"
						x-transition:enter-end="opacity-100"
						x-transition:leave="transition ease-in duration-200 transform"
						x-transition:leave-start="opacity-100"
						x-transition:leave-end="opacity-0"
						class="fixed inset-0 transition-opacity bg-gray-500 bg-opacity-40"
						aria-hidden="true"
					></div>
					<div
						x-cloak
						x-show="modalOpen"
						x-transition:enter="transition ease-out duration-300 transform"
						x-transition:enter-start="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
						x-transition:enter-end="opacity-100 translate-y-0 sm:scale-100"
						x-transition:leave="transition ease-in duration-200 transform"
						x-transition:leave-start="opacity-100 translate-y-0 sm:scale-100"
						x-transition:leave-end="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
						class="inline-block w-full max-w-xl p-8 my-20 overflow-hidden text-left transition-all transform bg-white rounded-lg shadow-xl 2xl:max-w-2xl"
					>
						<div class="flex items-center justify-between">
							<h1 class="text-xl font-medium text-gray-800 ">Edit { p.Title }</h1>
							<button @click="modalOpen = false" class="text-gray-600 focus:outline-none hover:text-gray-700">
								<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
								</svg>
							</button>
						</div>
						<form
							class="mt-5 flex flex-col gap-2"
							hx-put={ "/publication/" + strconv.Itoa(p.ID) + "/follow" }
							hx-target={ "#publication-" + strconv.Itoa(p.ID) }
							hx-swap="outerHTML"
						>
							<label class="form-controll w-full">
								<div class="label">
									<span class="label-text">Episode</span>
								</div>
								// <select class="select select-bordered w-full " name="chapter_id">
								// 	<option disabled selected>Select episode</option>
								// 	for _, c := range p.Chapters {
								// 		<option value={ strconv.Itoa(c.ID) }>{ "Chapter " + c.Number + ", " + c.Title }</option>
								// 	}
								// </select>
							</label>
							<label class="form-controll w-full">
								<div class="label">
									<span class="label-text">Status</span>
								</div>
								<select class="select select-bordered w-full" name="status">
									<option disabled selected>Select status</option>
									// TODO add statuses table
									<option value={ STATUS_READING }>Reading</option>
									<option value={ STATUS_READING }>On hold</option>
									<option value={ STATUS_DROPPED }>Dropped</option>
								</select>
							</label>
							<label class="form-controll w-full">
								<div class="label">
									<span class="label-text">Source</span>
								</div>
								<select class="select select-bordered w-full ">
									<option disabled selected>Select source</option>
									// TODO add statuses table
									<option value="amazon">Netflix</option>
									<option value="amazon">Amazon prime</option>
								</select>
							</label>
							<div class="flex justify-end mt-6">
								<button type="submit" class="btn">Edit</button>
							</div>
						</form>
					</div>
				</div>
			</div>
		</div>
	</div>
}

templ DashboardPublication(p *services.Publication) {
	<div
		class="bg-base-100 shadow-sm flex "
		hx-swap="outerHTML"
		id={ "publication-" + strconv.Itoa(p.ID) }
	>
		<div class="flex-none ">
			// <img class=" max-w-32 h-full object-cover" src={ p.Image } alt="Movie"/>
		</div>
		<div class="flex-grow mx-3 my-1 flex flex-col justify-between">
			<div>
				<h2 class="card-title mb-1 text-lg">{ p.Title }</h2>
				<div class="mt-1">
					<div>
						aca irian los chapters bre
						// if p.LastReadChapterNumber == nil {
						// 	No chapters read yet
						// } else {
						// 	Last watched: Chapter { *p.LastReadChapterNumber }
						// }
					</div>
					// if p.LastChapterReadAt == nil {
					// 	<div class="text-xs text-neutral-500 font-semibold">
					// 		No chapters read yet
					// 	</div>
					// } else {
					// 	<div class="text-xs text-neutral-500 font-semibold">
					// 		{ p.LastChapterReadAt.Format("02 Jan 2006") }
					// 	</div>
					// }
				</div>
				<div class="mt-1">
					<div>
						// if len(p.Chapters) == 0 {
						// 	No chapters available
						// } else {
						Last released: 
						// Chapter { p.Chapters[len(p.Chapters)-1].Number }
						// }
					</div>
					<div class="text-xs text-neutral-500 font-semibold">
						{ time.Now().Format("02 Jan 2006") }
					</div>
				</div>
			</div>
			<div class="flex justify-end">
				@Buttons(p)
			</div>
		</div>
	</div>
}
